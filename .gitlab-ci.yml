image: $CI_REGISTRY_IMAGE

variables:
  DOCKER_TLS_CERTDIR: ''

cache: &global_cache
  paths:
    - node_modules/
  policy: pull-push

.install_packages: &install_packages
  - |
    if [[ ! -d "node_modules" ]]; then
        yarn install --network-timeout 1000000
    fi

stages:
  - test
  - deploy
  - zap

.swpc-runner:
  tags:
    - aws
    - m4-large

default:
  tags:
    - DESKTOP-5CP7UMU

.deploy:
  stage: deploy
  services:
    - docker:19.03.8-dind
  only:
    refs:
      - tags
      - dev
      - master
  variables:
    USER: $SSOT_USER_NAME
    TOKEN: $SSOT_USER_TOKEN
    STAGE: prod
    TAG: $CI_COMMIT_TAG
  before_script:
    - echo "$TOKEN" | docker login -u 'robot$k8sprdwhqecossot2021+gitlab-runner' --password-stdin harbor.wistron.com
  script:
    - docker build --build-arg STAGE=$STAGE -t harbor.wistron.com/k8sprdwhqecossot2021/eco-ssot-frontend:$TAG .
    - docker push harbor.wistron.com/k8sprdwhqecossot2021/eco-ssot-frontend:$TAG
  cache: {}
  dependencies: []
  retry: 1

deploy:dev:
  only:
    refs:
      - dev
  variables:
    STAGE: dev
    TAG: $CI_COMMIT_BRANCH
  script:
    - export VERSION=${CI_COMMIT_SHA:0:8}
    - export IMAGE=harbor.wistron.com/k8sprdwhqecossot2021/eco-ssot-frontend:$VERSION-$TAG
    - docker build --build-arg STAGE=$STAGE -t $IMAGE .
    - docker push $IMAGE
    - |
      curl -k \
      -X PUT \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $RANCHER_TOKEN_DEV" \
      -d "{\"containers\":[{\"initContainer\":false,\"restartCount\":0,\"stdin\":true,\"stdinOnce\":false,\"tty\":true,\"allowPrivilegeEscalation\":false,\"image\":\"$IMAGE\",\"imagePullPolicy\":\"Always\",\"name\":\"eco-ssot-2021-frontend\",\"privileged\":false,\"readOnly\":false,\"resources\":{\"type\":\"/v3/project/schemas/resourceRequirements\",\"requests\":{},\"limits\":{}},\"runAsNonRoot\":false,\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"type\":\"container\",\"environmentFrom\":[],\"capAdd\":[],\"capDrop\":[],\"livenessProbe\":null,\"volumeMounts\":[]}]}" \
      "https://k8sportal.wistron.com/v3/project/local:p-hn246/workloads/deployment:eco-ssot-2021-dev:eco-ssot-2021-frontend"
  extends: .deploy

deploy:qas:
  only:
    refs:
      - qas
  variables:
    STAGE: prod
    TAG: prd
  script:
    - export VERSION=$(jq -r .version package.json)
    - export IMAGE=harbor.wistron.com/k8sprdwhqecossot2021/eco-ssot-frontend:$VERSION-$TAG
    - docker build --build-arg STAGE=$STAGE -t $IMAGE .
    - docker push $IMAGE
    - |
      curl -k \
      -X PUT \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $RANCHER_TOKEN_QAS" \
      -d "{\"containers\":[{\"initContainer\":false,\"restartCount\":0,\"stdin\":true,\"stdinOnce\":false,\"tty\":true,\"allowPrivilegeEscalation\":false,\"image\":\"$IMAGE\",\"imagePullPolicy\":\"Always\",\"name\":\"eco-ssot-2021-frontend\",\"privileged\":false,\"readOnly\":false,\"resources\":{\"type\":\"/v3/project/schemas/resourceRequirements\",\"requests\":{},\"limits\":{}},\"runAsNonRoot\":false,\"terminationMessagePath\":\"/dev/termination-log\",\"terminationMessagePolicy\":\"File\",\"type\":\"container\",\"environmentFrom\":[],\"capAdd\":[],\"capDrop\":[],\"livenessProbe\":null,\"volumeMounts\":[]}]}" \
      "https://k8sqas-whq.wistron.com/v3/project/local:p-q65m7/workloads/deployment:eco-ssot-2021-qas:eco-ssot-2021-frontend"
  extends: .deploy

deploy:prod:
  only:
    refs:
      - master
  variables:
    STAGE: prod
    TAG: prd
  script:
    - export VERSION=$(jq -r .version package.json)
    - export IMAGE=harbor.wistron.com/k8sprdwhqecossot2021/eco-ssot-frontend:$VERSION-$TAG
    - docker build --build-arg STAGE=$STAGE -t $IMAGE .
    - docker push $IMAGE
  extends: .deploy

# deploy:prod:
#   only:
#     refs:
#       - tags
#     variables:
#       - $CI_COMMIT_TAG =~ /prod|prd/
#   extends: .deploy

test:
  image: node:14
  stage: test
  only:
    - testing
  before_script:
    - *install_packages
  script:
    - yarn test:ci
  artifacts:
    paths:
      - coverage/
    expire_in: 1h
  dependencies: []
  allow_failure: true
  tags:
    - aws
    - m4-large

.zap:
  services:
    - docker:19.03.8-dind
  stage: zap
  only:
    - zap
    # - dev
    # - master
  variables:
    TARGET: https://eco-ssot-2021-dev.k8sprd-whq.k8s.wistron.com
  before_script:
    - docker pull owasp/zap2docker-stable
  script:
    - docker run -t owasp/zap2docker-stable zap-baseline.py -t $TARGET
  allow_failure: true
# zap:dev:
#   only:
#     - zap
#     - dev
#   extends: .zap

# zap:prod:
#   only:
#     - master
#   variables:
#     TARGET: http://eco-ssot-2021-prd.k8sprd-whq.k8s.wistron.com
#   extends: .zap
